"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/storefront/page",{

/***/ "(app-pages-browser)/./src/app/services/returns-processor.js":
/*!***********************************************!*\
  !*** ./src/app/services/returns-processor.js ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   processReturnsWithRule: () => (/* binding */ processReturnsWithRule)\n/* harmony export */ });\n/* harmony import */ var _rule_execution_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rule-execution-engine */ \"(app-pages-browser)/./src/app/services/rule-execution-engine.js\");\n/* harmony import */ var _api_returns_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/returns/data */ \"(app-pages-browser)/./src/app/api/returns/data.js\");\n// app/services/returns-processor.js\n\n\n/**\n * Processes all returns through the rule engine and generates updated statistics\n * @param {Object} ruleDefinition - The exported rule definition JSON\n * @returns {Object} Updated statistics and categorized returns\n */ async function processReturnsWithRule(ruleDefinition) {\n    // Get all recent returns\n    const returns = await (0,_api_returns_data__WEBPACK_IMPORTED_MODULE_1__.getRecentReturns)();\n    const baseStatistics = await (0,_api_returns_data__WEBPACK_IMPORTED_MODULE_1__.getReturnStatistics)();\n    // Process each return through the rule engine\n    const processedReturns = returns.map((returnItem)=>{\n        var _returnItem_items__condition, _returnItem_items__condition1;\n        // Format the return data in the structure expected by the rule engine\n        const returnData = {\n            id: returnItem.id,\n            customerId: returnItem.customerId,\n            customerName: returnItem.customerName,\n            returnFrequency: returnItem.returnFrequency || 'Normal',\n            purchaseDate: returnItem.datePurchased,\n            returnDate: returnItem.dateReturned,\n            itemCondition: ((_returnItem_items__condition = returnItem.items[0].condition) === null || _returnItem_items__condition === void 0 ? void 0 : _returnItem_items__condition.toLowerCase().includes('new')) ? 'unused' : 'used',\n            originalPackaging: ((_returnItem_items__condition1 = returnItem.items[0].condition) === null || _returnItem_items__condition1 === void 0 ? void 0 : _returnItem_items__condition1.toLowerCase().includes('tag')) ? true : false,\n            reason: returnItem.items[0].reason,\n            reasonDetails: returnItem.items[0].reasonDetails,\n            customerReturnsCount: returnItem.returnFrequency === 'High' ? 6 : 2,\n            orderValue: returnItem.items.reduce((total, item)=>total + item.price * item.quantity, 0),\n            itemsCount: returnItem.items.length,\n            categories: [\n                ...new Set(returnItem.items.map((item)=>item.category))\n            ]\n        };\n        // Execute the rule on this return\n        try {\n            const result = (0,_rule_execution_engine__WEBPACK_IMPORTED_MODULE_0__.executeRule)(ruleDefinition, returnData);\n            // Combine original return data with rule processing result\n            return {\n                ...returnItem,\n                ruleProcessingResult: result.result,\n                executionPath: result.executionPath,\n                autoProcessed: result.isComplete,\n                // Update the return status and next actions based on rule result\n                status: mapRuleResultToStatus(result.result, returnItem.status),\n                nextAction: mapRuleResultToNextAction(result.result, returnItem.nextAction)\n            };\n        } catch (error) {\n            console.error(\"Error processing return \".concat(returnItem.id, \":\"), error);\n            return {\n                ...returnItem,\n                ruleProcessingResult: 'ERROR',\n                executionPath: [],\n                autoProcessed: false\n            };\n        }\n    });\n    // Generate updated statistics based on rule processing\n    const updatedStatistics = generateUpdatedStatistics(baseStatistics, processedReturns);\n    return {\n        processedReturns,\n        statistics: updatedStatistics,\n        insights: generateInsightsFromProcessing(processedReturns, updatedStatistics)\n    };\n}\n/**\n * Maps a rule result to a return status\n */ function mapRuleResultToStatus(ruleResult, currentStatus) {\n    switch(ruleResult){\n        case 'APPROVED':\n            return 'Processed';\n        case 'REJECTED':\n            return 'Rejected';\n        case 'MANUAL_REVIEW':\n            return 'Under Review';\n        default:\n            return currentStatus;\n    }\n}\n/**\n * Maps a rule result to a next action\n */ /**\n * Maps a rule result to a next action\n */ function mapRuleResultToNextAction(ruleResult, currentNextAction, returnItem) {\n    if (ruleResult.startsWith('OUTCOME_')) {\n        return ruleResult.replace('OUTCOME_', '');\n    }\n    switch(ruleResult){\n        case 'APPROVED':\n            var _returnItem_items__condition;\n            // Check the condition and assign to Resale or Refund Process based on condition\n            if (returnItem && returnItem.items && returnItem.items[0] && (returnItem.items[0].condition === 'Like New' || ((_returnItem_items__condition = returnItem.items[0].condition) === null || _returnItem_items__condition === void 0 ? void 0 : _returnItem_items__condition.includes('New')))) {\n                return 'Resale';\n            }\n            return 'Refund Process';\n        case 'REJECTED':\n            return 'Return to Customer';\n        case 'MANUAL_REVIEW':\n            return 'Quality Assessment';\n        default:\n            return currentNextAction;\n    }\n}\n/**\n * Generates updated statistics based on rule processing results\n */ function generateUpdatedStatistics(baseStatistics, processedReturns) {\n    // Clone the base statistics\n    const statistics = JSON.parse(JSON.stringify(baseStatistics));\n    // Update the statistics based on rule processing\n    statistics.overall.approved = processedReturns.filter((r)=>r.ruleProcessingResult === 'APPROVED' || r.status === 'Processed').length;\n    statistics.overall.denied = processedReturns.filter((r)=>r.ruleProcessingResult === 'REJECTED' || r.status === 'Rejected').length;\n    statistics.overall.pending = processedReturns.filter((r)=>r.ruleProcessingResult === 'MANUAL_REVIEW' || r.status === 'Under Review' || r.status === 'In Process').length;\n    // Calculate the fraud suspected value\n    statistics.overall.fraudSuspected = processedReturns.filter((r)=>r.flag === 'Frequent returner' || r.returnFrequency === 'High' || r.riskScore && r.riskScore > 50).length;\n    // Update by processing status\n    statistics.byProcessingStatus = [\n        {\n            status: \"Refunded\",\n            count: processedReturns.filter((r)=>r.ruleProcessingResult === 'APPROVED' || r.status === 'Processed').length,\n            percentage: Math.round(processedReturns.filter((r)=>r.ruleProcessingResult === 'APPROVED' || r.status === 'Processed').length / processedReturns.length * 100)\n        },\n        {\n            status: \"Resale\",\n            count: processedReturns.filter((r)=>r.nextAction === 'Resale').length,\n            percentage: Math.round(processedReturns.filter((r)=>r.nextAction === 'Resale').length / processedReturns.length * 100)\n        },\n        {\n            status: \"Refurbishment\",\n            count: processedReturns.filter((r)=>r.nextAction === 'Refurbishment').length,\n            percentage: Math.round(processedReturns.filter((r)=>r.nextAction === 'Refurbishment').length / processedReturns.length * 100)\n        },\n        {\n            status: \"Damaged/Write-off\",\n            count: processedReturns.filter((r)=>r.nextAction === 'Quality Assessment').length,\n            percentage: Math.round(processedReturns.filter((r)=>r.nextAction === 'Quality Assessment').length / processedReturns.length * 100)\n        }\n    ];\n    // Calculate auto-processing effectiveness\n    const automaticallyProcessed = processedReturns.filter((r)=>r.autoProcessed).length;\n    statistics.automationMetrics = {\n        automaticallyProcessed,\n        automationRate: Math.round(automaticallyProcessed / processedReturns.length * 100),\n        manualReviewRate: Math.round(processedReturns.filter((r)=>r.ruleProcessingResult === 'MANUAL_REVIEW').length / processedReturns.length * 100),\n        averagePathLength: Math.round(processedReturns.reduce((sum, r)=>{\n            var _r_executionPath;\n            return sum + (((_r_executionPath = r.executionPath) === null || _r_executionPath === void 0 ? void 0 : _r_executionPath.length) || 0);\n        }, 0) / processedReturns.length)\n    };\n    return statistics;\n}\n/**\n * Generates insights based on rule processing\n */ function generateInsightsFromProcessing(processedReturns, statistics) {\n    const insights = [];\n    // Check for high automation opportunities\n    if (statistics.automationMetrics.automationRate < 70) {\n        insights.push({\n            type: \"trend\",\n            title: \"Automation Opportunity\",\n            description: \"Current automation rate is \".concat(statistics.automationMetrics.automationRate, \"%. Consider additional rule refinements.\"),\n            recommendations: [\n                \"Add more condition blocks to your rule flow\",\n                \"Refine existing conditions to be more specific\",\n                \"Create separate rules for different product categories\"\n            ],\n            priority: \"Medium\",\n            potentialImpact: \"Reduced processing costs\"\n        });\n    }\n    // Check for high manual review rate\n    if (statistics.automationMetrics.manualReviewRate > 30) {\n        insights.push({\n            type: \"inventory\",\n            title: \"High Manual Review Rate\",\n            description: \"\".concat(statistics.automationMetrics.manualReviewRate, \"% of returns are being sent for manual review. This increases processing time.\"),\n            recommendations: [\n                \"Refine rule conditions to reduce manual reviews\",\n                \"Add more specific rules for common return scenarios\"\n            ],\n            priority: \"High\",\n            potentialImpact: \"Faster processing, improved customer satisfaction\"\n        });\n    }\n    // Check for return reasons that might need attention\n    const reasonCounts = {};\n    processedReturns.forEach((r)=>{\n        const reason = r.items[0].reason;\n        reasonCounts[reason] = (reasonCounts[reason] || 0) + 1;\n    });\n    const topReason = Object.entries(reasonCounts).sort((a, b)=>b[1] - a[1])[0];\n    if (topReason && topReason[1] > processedReturns.length * 0.3) {\n        insights.push({\n            type: \"customer\",\n            title: 'High Return Rate: \"'.concat(topReason[0], '\"'),\n            description: \"\".concat(Math.round(topReason[1] / processedReturns.length * 100), '% of returns cite \"').concat(topReason[0], '\" as the reason.'),\n            recommendations: [\n                \"Review product descriptions and sizing information\",\n                \"Consider adjusting product design or features\",\n                \"Add more detailed product information to reduce expectation mismatch\"\n            ],\n            priority: \"High\",\n            potentialImpact: \"Reduced return rate, increased customer satisfaction\"\n        });\n    }\n    // If there are many frequent returners, add an insight\n    const frequentReturners = processedReturns.filter((r)=>r.returnFrequency === 'High' || r.flag === 'Frequent returner').length;\n    if (frequentReturners > processedReturns.length * 0.15) {\n        insights.push({\n            type: \"fraud\",\n            title: \"High Rate of Frequent Returners\",\n            description: \"\".concat(Math.round(frequentReturners / processedReturns.length * 100), \"% of returns are from frequent returners.\"),\n            recommendations: [\n                \"Review current return policy limits\",\n                \"Consider implementing a return fee for excessive returns\",\n                \"Create special rules for handling frequent returners\"\n            ],\n            priority: \"Medium\",\n            potentialImpact: \"Reduced return abuse, better profit margins\"\n        });\n    }\n    return insights;\n} /**\n * Example usage:\n * \n * // Load your exported rule definition JSON\n * import myRuleDefinition from './my_return_policy_rule.json';\n * \n * // Process all returns using this rule\n * const { processedReturns, statistics, insights } = await processReturnsWithRule(myRuleDefinition);\n * \n * // Now you can update your dashboard with this data\n * updateDashboard(processedReturns, statistics, insights);\n */ \n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/services/returns-processor.js\n"));

/***/ })

});